# -*- coding: utf-8 -*-
"""CNN_Covid_Chest_Xray_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mHSNVyLAiO7BAQkHc5PKlYBSt-ibSuw8
"""

from google.colab import drive
drive.mount('/content/drive')

"""Unzip the zip file containing your dataset and metadata"""

!unzip "/content/drive/My Drive/562468_1022626_bundle_archive.zip"

!unzip "/content/drive/My Drive/Coronahack-Chest-XRay-Dataset/Coronahack-Chest-XRay-Dataset/548681_1157383_bundle_archive.zip"

"""Importing the Libraries"""

import pandas as pd
import os
import shutil
import matplotlib.pyplot as plt
import imutils
from imutils import paths
import random

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# rm -rf dataset/train/covid/
# rm -rf dataset/train/normal/
# rm -rf dataset/test/covid
# rm -rf dataset/test/normal
# rm -rf dataset
# mkdir -p dataset/train/covid
# mkdir -p dataset/train/normal
# mkdir -p dataset/test/covid
# mkdir -p dataset/test/normal

dataset_path = './dataset'

covid_dataset_path = './Coronahack-Chest-XRay-Dataset'

import os
os.getcwd()

df = pd.read_csv('Chest_xray_Corona_Metadata.csv')
print(df['Label'].value_counts())
print(df['Label_2_Virus_category'].value_counts())
print(os.path)

# loop over the rows of the COVID-19 data frame to set the training data
for (i, row) in df.iterrows():

    if row["Label_2_Virus_category"] == "COVID-19" and row['Dataset_type'] == "TRAIN":
        # build the path to the input image file
        imagePath = os.path.sep.join([f"{covid_dataset_path}/Coronahack-Chest-XRay-Dataset/train", row["X_ray_image_name"]])
        print(imagePath)

        if not os.path.exists(imagePath):
            continue
        outputPath = os.path.sep.join([f"{dataset_path}/train/covid", row["X_ray_image_name"]])
        print(outputPath)
        # copy the image
        shutil.copy2(imagePath, outputPath)

# loop over the rows of the Normal data frame for setting the training dataset
count = 0
for (i, row) in df.iterrows():
    # As the dataset is imbalanced sample the data to prevent over fitting.
    if count > 300:
      break

    if row["Label"] == "Normal" and row["Dataset_type"] == "TRAIN":
        # build the path to the input image file
        imagePath = os.path.sep.join([f"{covid_dataset_path}/Coronahack-Chest-XRay-Dataset/train", row["X_ray_image_name"]])
        print(imagePath)

        if not os.path.exists(imagePath):
            continue
        outputPath = os.path.sep.join([f"{dataset_path}/train/normal", row["X_ray_image_name"]])
        print(outputPath)
        # copy the image
        shutil.copy2(imagePath, outputPath)
        count+=1

"""Moving a part of the training dataset to the test dataset"""

basePath = './dataset/train/normal'
imagePaths = list(paths.list_images(basePath))
samples = 20
# randomly sample the image paths
random.seed(42)
random.shuffle(imagePaths)
imagePaths = imagePaths[:samples]

# loop over the image paths
for (i, imagePath) in enumerate(imagePaths):
    # extract the filename from the image path and then construct the
    # path to the copied image file
    print(imagePath)
    if os.path.exists(imagePath):
      filename = imagePath.split(os.path.sep)[-1]
      outputPath = os.path.sep.join([f"{dataset_path}/test/normal", filename])

      # cut the image
      shutil.move(imagePath, outputPath)

basePath = './dataset/train/covid'
imagePaths = list(paths.list_images(basePath))
samples = 20
# randomly sample the image paths
random.seed(42)
random.shuffle(imagePaths)
imagePaths = imagePaths[:samples]

# loop over the image paths
for (i, imagePath) in enumerate(imagePaths):
    # extract the filename from the image path and then construct the
    # path to the copied image file
    print(imagePath)
    if os.path.exists(imagePath):
      filename = imagePath.split(os.path.sep)[-1]
      outputPath = os.path.sep.join([f"{dataset_path}/test/covid", filename])

      # cut the image
      shutil.move(imagePath, outputPath)

def ceildiv(a, b):
    return -(-a // b)

def plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):
    """Plot the images in a grid"""
    f = plt.figure(figsize=figsize)
    if maintitle is not None: plt.suptitle(maintitle, fontsize=10)
    for i in range(len(imspaths)):
        sp = f.add_subplot(rows, ceildiv(len(imspaths), rows), i+1)
        sp.axis('Off')
        if titles is not None: sp.set_title(titles[i], fontsize=16)
        img = plt.imread(imspaths[i])
        plt.imshow(img)

from imutils import paths
covid_images = list(paths.list_images(f"{dataset_path}/train/covid"))
normal_images = list(paths.list_images(f"{dataset_path}/train/normal"))
covid_test_images = list(paths.list_images(f"{dataset_path}/test/covid"))
normal_test_images = list(paths.list_images(f"{dataset_path}/test/normal"))
print(len(covid_images), len(covid_test_images))
print(len(normal_images), len(normal_test_images))
plots_from_files(covid_images, rows=5, maintitle="Covid-19 X-ray images")
plots_from_files(normal_images, rows=5, maintitle="Normal X-ray images")

"""Importing the libraries"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""Preprocessing the tarining directory and Validation directory"""

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
        './dataset/train',
        target_size=(224, 224),
        batch_size=20,
        class_mode='binary')
validation_generator = test_datagen.flow_from_directory(
        './dataset/test',
        target_size=(224, 224),
        batch_size=20,
        class_mode='binary')

"""Building the CNN"""

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(64, kernel_size=3, activation='relu', input_shape=[224,224,3]))
model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
model.add(tf.keras.layers.Conv2D(64, kernel_size=3, activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
model.add(tf.keras.layers.Conv2D(64, kernel_size=3, activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(units=128, activation='relu'))
model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))
model.summary()

"""Building the ResNet Model"""

class MyCallback(tf.keras.callbacks.Callback):

  def on_epoch_end(self, epoch, logs={}):
    if logs.get('val_acc') > 0.95 :
      print("\n Recahed accuracy above 95% ")
      self.model.stop_training = True

"""Fitting your Model"""

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])
hist_model = model.fit(x=train_generator, validation_data=validation_generator, epochs=10, callbacks=[MyCallback()])

"""Testing on an unseen image"""

import numpy as np
from keras.preprocessing import image

test_image = image.load_img('/content/images/extubation-8.jpg', target_size=(224,224))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict(test_image)
train_generator.class_indices
if result[0][0] == 0:
  print("Covid")
else:
  print("Non-Covid")

"""Visualizing the Simple CNN Model's accuracy curve"""

plt.plot(hist_model.history["acc"])
plt.plot(hist_model.history['val_acc'])
plt.plot(hist_model.history['loss'])
plt.plot(hist_model.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()