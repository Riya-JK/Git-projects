# -*- coding: utf-8 -*-
"""COVID-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kfo56plWCo0ulTLI2viyEgMHiLVGYYs6
"""

!unzip '/content/drive/My Drive/Coronahack-Chest-XRay-Dataset/Coronahack-Chest-XRay-Dataset/548681_1157383_bundle_archive.zip'

import pandas as pd
import os
import shutil
import matplotlib.pyplot as plt
from imutils import paths
import random

dataset_path = './dataset'

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# rm -rf dataset/train/covid/
# rm -rf dataset/train/normal/
# rm -rf dataset/test/covid
# rm -rf dataset/test/normal
# rm -rf dataset
# mkdir -p dataset/train/covid
# mkdir -p dataset/train/normal
# mkdir -p dataset/test/covid
# mkdir -p dataset/test/normal

samples = 15

covid_dataset_path = './images'

df = pd.read_csv("metadata.csv")
print(df['finding'].value_counts())
print(df['view'].value_counts())
print(os.path)

# loop over the rows of the COVID-19 data frame
for (i, row) in df.iterrows():
    # if (1) the current case is not COVID-19 or (2) this is not
    # a 'PA' view, then ignore the row
    if row["finding"] != "COVID-19" or row["view"] != "PA":
        continue

    # build the path to the input image file
    imagePath = os.path.sep.join([f"{covid_dataset_path}", row["filename"]])
    print(imagePath)

    #if not os.path.exists(imagePath):
    #    continue
    # extract the filename from the image path and then construct the
    # path to the copied image file
    filename = row["finding"].split(os.path.sep)[-1]
    outputPath = os.path.sep.join([f"{dataset_path}/train/covid", row["filename"]])
    print(outputPath)
    # copy the image
    shutil.copy2(imagePath, outputPath)

# loop over the rows of the Normal data frame
for (i, row) in df.iterrows():
    # if (1) the current case is not COVID-19 or (2) this is not
    # a 'PA' view, then ignore the row
    if row["finding"] == "COVID-19" or row["finding"] == "COVID-19, ARDS":
        continue

    # build the path to the input image file
    imagePath = os.path.sep.join([f"{covid_dataset_path}", row["filename"]])
    print(imagePath)

    #if not os.path.exists(imagePath):
    #    continue
    # extract the filename from the image path and then construct the
    # path to the copied image file
    filename = row["finding"].split(os.path.sep)[-1]
    outputPath = os.path.sep.join([f"{dataset_path}/train/normal", row["filename"]])
    print(outputPath)
    # copy the image
    shutil.copy2(imagePath, outputPath)

"""Moving a part of the training dataset to the test dataset"""

basePath = './dataset/train/normal'
imagePaths = list(paths.list_images(basePath))

# randomly sample the image paths
random.seed(42)
random.shuffle(imagePaths)
imagePaths = imagePaths[:samples]

# loop over the image paths
for (i, imagePath) in enumerate(imagePaths):
    # extract the filename from the image path and then construct the
    # path to the copied image file
    print(imagePath)
    if os.path.exists(imagePath):
      filename = imagePath.split(os.path.sep)[-1]
      outputPath = os.path.sep.join([f"{dataset_path}/test/normal", filename])

      # cut the image
      shutil.move(imagePath, outputPath)

basePath = './dataset/train/covid'
imagePaths = list(paths.list_images(basePath))

# randomly sample the image paths
random.seed(42)
random.shuffle(imagePaths)
imagePaths = imagePaths[:samples]

# loop over the image paths
for (i, imagePath) in enumerate(imagePaths):
    # extract the filename from the image path and then construct the
    # path to the copied image file
    print(imagePath)
    if os.path.exists(imagePath):
      filename = imagePath.split(os.path.sep)[-1]
      outputPath = os.path.sep.join([f"{dataset_path}/test/covid", filename])

      # cut the image
      shutil.move(imagePath, outputPath)

def ceildiv(a, b):
    return -(-a // b)

def plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):
    """Plot the images in a grid"""
    f = plt.figure(figsize=figsize)
    if maintitle is not None: plt.suptitle(maintitle, fontsize=10)
    for i in range(len(imspaths)):
        sp = f.add_subplot(rows, ceildiv(len(imspaths), rows), i+1)
        sp.axis('Off')
        if titles is not None: sp.set_title(titles[i], fontsize=16)
        img = plt.imread(imspaths[i])
        plt.imshow(img)

from imutils import paths
covid_images = list(paths.list_images(f"{dataset_path}/train/covid"))
normal_images = list(paths.list_images(f"{dataset_path}/train/normal"))
covid_test_images = list(paths.list_images(f"{dataset_path}/test/covid"))
normal_test_images = list(paths.list_images(f"{dataset_path}/test/normal"))
print(len(covid_images), len(covid_test_images))
print(len(normal_images), len(normal_test_images))
plots_from_files(covid_images, rows=5, maintitle="Covid-19 X-ray images")
plots_from_files(normal_images, rows=5, maintitle="Normal X-ray images")

"""Importing the libraries"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications import VGG16, ResNet50
from keras.preprocessing.image import ImageDataGenerator

"""Preprocessing the tarining directory and Validation directory"""

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
        '/content/dataset/train',
        target_size=(224, 224),
        batch_size=15,
        class_mode='binary')
validation_generator = test_datagen.flow_from_directory(
        '/content/dataset/test',
        target_size=(224, 224),
        batch_size=15,
        class_mode='binary')

"""Building the ResNet50 Model"""

from tensorflow.keras.applications import VGG19, ResNet50
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg19 import preprocess_input

base_model = ResNet50(weights='imagenet', input_tensor=tf.keras.layers.Input(shape=(224,224,3)), include_top=False)
end_model = base_model.output
end_model = tf.keras.layers.Flatten()(end_model)
end_model = tf.keras.layers.Dense(units=128, activation='relu')(end_model)
end_model = tf.keras.layers.Dense(units=1, activation='sigmoid')(end_model)
ResNetmodel = Model(inputs=base_model.input, outputs=end_model)
ResNetmodel.summary()

class MyCallback(tf.keras.callbacks.Callback):

  def on_epoch_end(self, epoch, logs={}):
    if logs.get('acc') > 0.95 :
      print("\n Recahed accuracy above 90% ")
      self.model.stop_training = True

"""Fitting your VGG19 Model"""

from tensorflow.keras.optimizers import Adam
INIT_LR = 0.0003
opt = Adam(lr=INIT_LR)
ResNetmodel.compile(optimizer=opt, loss='binary_crossentropy', metrics=['acc'])
hist = ResNetmodel.fit(x=train_generator, validation_data=validation_generator, epochs=10, callbacks=[MyCallback()])

"""Fitting your Model

Testing on a single image
"""

import numpy as np
from keras.preprocessing import image

test_image = image.load_img('/content/dataset/train/normal/ARDSSevere.png', target_size=(224,224))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = ResNetmodel.predict(test_image)
print(train_generator.class_indices)
if result[0][0] == 0:
  print("Covid")
else:
  print("Normal")

"""Visualizing the accuracy curve of the ResNet Model"""

import matplotlib.pyplot as plt
plt.plot(hist.history["acc"])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()